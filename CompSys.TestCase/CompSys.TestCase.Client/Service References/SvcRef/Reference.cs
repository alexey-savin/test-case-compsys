//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompSys.TestCase.Client.SvcRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SvcRef.ICompSysService")]
    public interface ICompSysService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/GetOrAdd", ReplyAction="http://tempuri.org/ICompSysService/GetOrAddResponse")]
        int GetOrAdd(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/GetOrAdd", ReplyAction="http://tempuri.org/ICompSysService/GetOrAddResponse")]
        System.Threading.Tasks.Task<int> GetOrAddAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/AddOrUpdate", ReplyAction="http://tempuri.org/ICompSysService/AddOrUpdateResponse")]
        void AddOrUpdate(int id, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/AddOrUpdate", ReplyAction="http://tempuri.org/ICompSysService/AddOrUpdateResponse")]
        System.Threading.Tasks.Task AddOrUpdateAsync(int id, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/Transfer", ReplyAction="http://tempuri.org/ICompSysService/TransferResponse")]
        void Transfer(int id1, int id2, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompSysService/Transfer", ReplyAction="http://tempuri.org/ICompSysService/TransferResponse")]
        System.Threading.Tasks.Task TransferAsync(int id1, int id2, decimal amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompSysServiceChannel : CompSys.TestCase.Client.SvcRef.ICompSysService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompSysServiceClient : System.ServiceModel.ClientBase<CompSys.TestCase.Client.SvcRef.ICompSysService>, CompSys.TestCase.Client.SvcRef.ICompSysService {
        
        public CompSysServiceClient() {
        }
        
        public CompSysServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompSysServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompSysServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompSysServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetOrAdd(string name) {
            return base.Channel.GetOrAdd(name);
        }
        
        public System.Threading.Tasks.Task<int> GetOrAddAsync(string name) {
            return base.Channel.GetOrAddAsync(name);
        }
        
        public void AddOrUpdate(int id, int value) {
            base.Channel.AddOrUpdate(id, value);
        }
        
        public System.Threading.Tasks.Task AddOrUpdateAsync(int id, int value) {
            return base.Channel.AddOrUpdateAsync(id, value);
        }
        
        public void Transfer(int id1, int id2, decimal amount) {
            base.Channel.Transfer(id1, id2, amount);
        }
        
        public System.Threading.Tasks.Task TransferAsync(int id1, int id2, decimal amount) {
            return base.Channel.TransferAsync(id1, id2, amount);
        }
    }
}
